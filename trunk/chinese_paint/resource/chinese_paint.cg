

struct Interpolants
{
  float4 position : POSITION;
  float2 texCoord : TEXCOORD0;
  float4 diffuse  : COLOR0;
};


Interpolants WaterWaveVS(float4 position : POSITION,
                          float4 diffuse  : COLOR0,
                          float2 texCoord : TEXCOORD0,
						  uniform float4x4 worldViewProj)
{
  Interpolants o;

  //o.position = position;
  o.position = mul(worldViewProj, position);
  o.diffuse = diffuse;
  o.texCoord = texCoord;

  return(o);
}



float4 WaterWavePS(Interpolants i,
sampler2D previousHeightSampler               : register(s0),
sampler2D heightSampler                       : register(s1),
sampler2D dampeningSampler                    : register(s2),
uniform float2 psSimulationPositionWeighting,
uniform float2 psSimulationTexCoordDelta_x0y1,
uniform float2 psSimulationTexCoordDelta_x2y1,
uniform float2 psSimulationTexCoordDelta_x1y0,
uniform float2 psSimulationTexCoordDelta_x1y2,
uniform float psSimulationWaveSpeedSquared,
uniform float psSimulationOnefloatTimesDeltaTimeSquared,
uniform float3 psSimulationGridSize
) : COLOR
{
  float  acceleration;
  float  height_x1y1;
  float  height_x0y1, height_x2y1;
  float  height_x1y0, height_x1y2;
  float  previousHeight;
  float  newHeight;
  float  dampening;
  float3 normal;
  float3 dydx, dydz;
  float4 result;

  // Look up all the neighbor heights
  height_x1y1 = tex2D(heightSampler, i.texCoord).x;
  height_x0y1 = tex2D(heightSampler, i.texCoord + psSimulationTexCoordDelta_x0y1).x;
  height_x2y1 = tex2D(heightSampler, i.texCoord + psSimulationTexCoordDelta_x2y1).x;
  height_x1y0 = tex2D(heightSampler, i.texCoord + psSimulationTexCoordDelta_x1y0).x;
  height_x1y2 = tex2D(heightSampler, i.texCoord + psSimulationTexCoordDelta_x1y2).x;
  previousHeight = tex2D(previousHeightSampler, i.texCoord).x;
  dampening = tex2D(dampeningSampler, i.texCoord).x;


  // Compute the acceleration of the point based upon its neighbors
  acceleration = dampening * psSimulationWaveSpeedSquared * (height_x0y1 + height_x2y1 + height_x1y0 + height_x1y2 - 4.0 * height_x1y1);

  // Do Verlet integration
  newHeight = psSimulationPositionWeighting.x * height_x1y1 - 
              psSimulationPositionWeighting.y * previousHeight + 
              psSimulationOnefloatTimesDeltaTimeSquared * acceleration;
 
  // Calculate the normal
  dydx = float3(psSimulationGridSize.x, height_x2y1 - height_x1y1, 0.0);
  dydz = float3(0.0, height_x1y2 - height_x1y1, -psSimulationGridSize.z);
  normal = cross(dydx, dydz);
  normal = normalize(normal);


  // Combine the height and normal
  //result = float4(newHeight, normal);
  //result = float4(1.0, 0.0, 0.0, 1.0);
  result = float4(newHeight, 0.0, 0.0, 1.0);
  //result = float4(1.0, 0.0, 0.0, 1.0);
  //result = float4(acceleration, 0.0, 0.0, 1.0);
  //result = float4(psSimulationWaveSpeedSquared, 0.0, 0.0, 1.0);

  return(result);
}